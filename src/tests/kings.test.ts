import test from "tape";
import { channelMessagesToWindows } from "../helpers/channelToDKP";
import { loadJsonFile } from "../helpers/utils";
import { TextChannel, Message } from "discord.js";
import { writeToJSONFile } from "..";

test("Kings (Behe/Faf/Ada) Channel To DKP - 5 windows, pop msg", async (t) => {
  const mockKingsChannel = loadJsonFile(
    "test_data/behe_7.json"
  ) as TextChannel & { messages: Message[] };
  const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);
  // await writeToJSONFile(parsedWindowsPerMember);
  t.deepEqual(parsedWindowsPerMember, {
    Snyaar: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:39:28",
    },
    Tuple: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:40:17",
    },
    Junonrunon: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:40:17",
    },
    Rhelk: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:40:18",
    },
    Dogs: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:40:55",
    },
    Chuchu: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:42:51",
    },
    Miradin: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:43:17",
    },
    Habiba: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:43:21",
    },
    Cocopuff: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:43:35",
    },
    Azalin: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:43:49",
    },
    Loyuinyu: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:44:50",
    },
    Leob: {
      windows: 4,
      message: "x2 (lune)",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-17 06:59:57",
    },
    Switchstance: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:48:28",
    },
    Pengo: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:49:56",
    },
    Sabyrd: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:50:08",
    },
    Paulilla: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:50:12",
    },
    Waky: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:50:26",
    },
    Krados: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:50:44",
    },
    Naten: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:50:54",
    },
    Arch: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:51:36",
    },
    Ancestor: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:52:07",
    },
    Magnum: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:52:12",
    },
    Chaosmage: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:52:41",
    },
    Yupitan: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-17 06:53:44",
    },
    Nar: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-17 06:56:07",
    },
    Samseny: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-17 06:57:40",
    },
    Midnigh: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-17 07:03:39",
    },
    Suds: {
      windows: 3,
      message: "x3",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-17 07:15:16",
    },
    Caley: {
      windows: 1,
      message: "x5",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-17 07:28:00",
    },
    Gow: {
      windows: 1,
      message: "x5",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-17 07:29:28",
    },
    Sebasthegalka: {
      windows: 1,
      message: "x5",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-17 07:33:08",
    },
    Brandan: {
      windows: 0,
      message: "x-kill",
      xKill: true,
      xClaim: false,
      checkForError: false,
      timestamp: "2024-11-17 07:39:21",
    },
  });

  t.end();
});

test("Nov05 Ada4", async (t) => {
  const mockKingsChannel = loadJsonFile(
    "test_data/nov05-ada4.json"
  ) as TextChannel & { messages: Message[] };
  const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);
  // await writeToJSONFile(parsedWindowsPerMember);
  t.deepEqual(parsedWindowsPerMember, {
    Karianna: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:17:03",
    },
    Yeti: {
      windows: 2,
      message: "x (ka scout)",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:17:51",
    },
    Snyaar: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:18:02",
    },
    Arturiel: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:19:17",
    },
    Cocopuff: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:19:22",
    },
    Foopy: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:19:44",
    },
    Brandan: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:20:27",
    },
    Morrigan: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:21:12",
    },
    Tarnish: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:21:56",
    },
    Shei: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:21:59",
    },
    Nicolesixtynine: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:22:25",
    },
    Rhelk: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:22:38",
    },
    Syragon: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:22:40",
    },
    Chaosmage: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:24:15",
    },
    Naten: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:24:31",
    },
    Mayer: {
      windows: 2,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:25:24",
    },
    Riccu: {
      windows: 2,
      message: "x-1",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-05 09:25:42",
    },
    Tuple: {
      windows: 1,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-05 09:27:20",
    },
    Voidedge: {
      windows: 1,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-05 09:29:17",
    },
    Magnum: {
      windows: 1,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-05 09:29:36",
    },
    Senormiyagi: {
      windows: 1,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-05 09:29:49",
    },
    Sabyrd: {
      windows: 1,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-05 09:31:00",
    },
  });

  t.end();
});

test("Nov06 Ada5", async (t) => {
  const mockKingsChannel = loadJsonFile(
    "test_data/nov06-ada5.json"
  ) as TextChannel & { messages: Message[] };
  const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);
  // await writeToJSONFile(parsedWindowsPerMember);
  t.deepEqual(parsedWindowsPerMember, {
    Junonrunon: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:30:50",
    },
    Karianna: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:30:57",
    },
    Arturiel: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:32:17",
    },
    Byorn: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:37:12",
    },
    Leob: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:39:11",
    },
    Whereami: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:40:27",
    },
    Llate: {
      windows: 4,
      message: "x | x-out",
      xClaim: false,
      xKill: false,
      checkForError: false,
      timestamp: "2024-11-06 08:15:58",
      xOutWindow: 4,
    },
    Lilsheck: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:42:17",
    },
    Yupitan: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:44:32",
    },
    Sebasthegalka: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:44:32",
    },
    Caley: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:44:52",
    },
    Yeti: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:45:04",
    },
    Tuple: {
      windows: 5,
      message: "x1",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:45:20",
    },
    Cocopuff: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-06 07:45:29",
    },
    Krados: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-06 07:45:34",
    },
    Tarnish: {
      windows: 5,
      message: "x1",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-06 07:45:35",
    },
    Naten: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-06 07:45:37",
    },
    Brandan: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-06 07:48:50",
    },
    Faeyn: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-06 07:49:33",
    },
    Dogs: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-06 07:55:03",
    },
    Nar: {
      windows: 2,
      message: "x4",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-06 08:14:43",
    },
    Switchstance: {
      windows: 1,
      message: "x5",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-06 08:23:50",
    },
  });

  t.end();
});

test("Nov12 Beh2 - Alt name (darkfarkee)", async (t) => {
  const mockKingsChannel = loadJsonFile(
    "test_data/nov12-beh2.json"
  ) as TextChannel & { messages: Message[] };
  const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);
  // await writeToJSONFile(parsedWindowsPerMember);
  t.deepEqual(parsedWindowsPerMember, {
    Dogs: {
      windows: 3,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-12 12:47:14",
    },
    Taisai: {
      windows: 3,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-12 12:48:11",
    },
    Brandan: {
      windows: 3,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-12 12:49:57",
    },
    Cocopuff: {
      windows: 3,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-12 12:53:12",
    },
    Foopy: {
      windows: 3,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-12 12:54:00",
    },
    Mayer: {
      windows: 3,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-12 12:54:15",
    },
    Lilsheck: {
      windows: 3,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-12 12:55:00",
    },
    Yeti: {
      windows: 3,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-12 13:00:08",
    },
    Nar: {
      windows: 2,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-12 13:04:30",
    },
    Azagarth: {
      windows: 2,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-12 13:04:53",
    },
    Magnum: {
      windows: 2,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-12 13:07:38",
    },
    Arturiel: {
      windows: 2,
      message: "x2 darkfarkee",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-12 13:08:59",
    },
    Sabyrd: {
      windows: 1,
      message: "x3",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-12 13:17:05",
    },
    Kamakaze: {
      windows: 1,
      message: "x3",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-12 13:17:37",
    },
    Bigfrosty: {
      windows: 1,
      message: "x3",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-12 13:20:28",
    },
  });

  t.end();
});

test("Nov13 Ada7 - Alt name (darkfarkee)", async (t) => {
  const mockKingsChannel = loadJsonFile(
    "test_data/nov13-ada7.json"
  ) as TextChannel & { messages: Message[] };
  const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);
  // await writeToJSONFile(parsedWindowsPerMember);
  t.deepEqual(parsedWindowsPerMember, {
    Syragon: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:41:03",
    },
    Loyuinyu: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:41:16",
    },
    Pestii: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:41:20",
    },
    Tarnish: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:42:20",
    },
    Donovan: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:42:24",
    },
    Morrigan: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:42:26",
    },
    Yinah: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:42:52",
    },
    Bear: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:43:05",
    },
    Pengo: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:43:07",
    },
    Nuke: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:43:08",
    },
    Chaosmage: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:44:31",
    },
    Etra: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:44:44",
    },
    Naten: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:45:13",
    },
    Azagarth: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:45:32",
    },
    Byorn: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:46:57",
    },
    Switchstance: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:47:29",
    },
    Dcplee: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:47:50",
    },
    Nesta: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:48:36",
    },
    Faeyn: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:49:16",
    },
    Sqook: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:49:51",
    },
    Samuraijake: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:50:26",
    },
    Arturiel: {
      windows: 1,
      message: "x darkfarkee",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:50:58",
    },
    Blackdog: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:51:20",
    },
    Chuchu: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:51:20",
    },
    Koobu: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:51:44",
    },
    Mathrandir: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:52:38",
    },
    Llate: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:52:38",
    },
    Shei: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:52:42",
    },
    Goodtimes: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:52:43",
    },
    Gogen: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:52:53",
    },
    Mayer: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:52:56",
    },
    Brandan: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:53:18",
    },
    Ancestor: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:53:35",
    },
    Karianna: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:53:40",
    },
    Rhelk: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:55:31",
    },
    Cocopuff: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:56:36",
    },
    Darth: {
      windows: 1,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:57:45",
    },
    Nar: {
      windows: 1,
      message: "x1",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-13 20:58:32",
    },
  });

  t.end();
});

test("Nov14 Beg4 - x-out timing, alt name", async (t) => {
  const mockKingsChannel = loadJsonFile(
    "test_data/nov14-beh4.json"
  ) as TextChannel & { messages: Message[] };
  const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);
  // await writeToJSONFile(parsedWindowsPerMember);
  t.deepEqual(parsedWindowsPerMember, {
    Chaosmage: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 09:52:37",
    },
    Dogs: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 09:53:11",
    },
    Miradin: {
      windows: 6,
      message: "x-kv scout",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 09:53:39",
    },
    Tarnish: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 09:53:42",
    },
    Byorn: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 09:53:53",
    },
    Xtal: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 09:54:22",
    },
    Lilsheck: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 09:55:35",
    },
    Arturiel: {
      windows: 6,
      message: "x darkfarkee",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 10:01:05",
    },
    Koobu: {
      windows: 1,
      message: "x | x out",
      xClaim: false,
      xKill: false,
      checkForError: false,
      timestamp: "2024-11-14 10:17:05",
      xOutWindow: 1,
    },
    Cocopuff: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 10:02:07",
    },
    Shei: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 10:03:41",
    },
    Blankets: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 10:08:46",
    },
    Leob: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 10:09:02",
    },
    Nar: {
      windows: 6,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-14 10:10:47",
    },
    Draxzy: {
      windows: 5,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-14 10:16:25",
    },
    Naten: {
      windows: 5,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-14 10:16:42",
    },
    Yupitan: {
      windows: 5,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-14 10:16:48",
    },
    Yeti: {
      windows: 5,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-14 10:17:35",
    },
    Mathrandir: {
      windows: 5,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-14 10:20:11",
    },
    Syragon: {
      windows: 4,
      message: "x3",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-14 10:21:16",
    },
    Vac: {
      windows: 2,
      message: "x5",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-14 10:46:21",
    },
    Thris: {
      windows: 1,
      message: "x6",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-14 10:55:54",
    },
    Sabyrd: {
      windows: 1,
      message: "x6",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-14 10:58:46",
    },
  });

  t.end();
});

test("Nov15 Ada2 - early termination no pop with x2 and x-out member", async (t) => {
  const mockKingsChannel = loadJsonFile(
    "test_data/nov15-ada2.json"
  ) as TextChannel & { messages: Message[] };
  const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);
  // await writeToJSONFile(parsedWindowsPerMember);
  t.deepEqual(parsedWindowsPerMember, {
    Arturiel: {
      windows: 7,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-15 17:36:48",
    },
    Demonterror: {
      windows: 7,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-15 17:37:04",
    },
    Cyr: {
      windows: 7,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-15 17:40:57",
    },
    Cocopuff: {
      windows: 7,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-15 17:42:45",
    },
    Habiba: {
      windows: 2,
      message: "x | x out",
      xClaim: false,
      xKill: false,
      checkForError: false,
      timestamp: "2024-11-15 18:02:29",
      xOutWindow: 2,
    },
    Waky: {
      windows: 7,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-15 17:48:56",
    },
    Mathrandir: {
      windows: 7,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-15 17:49:21",
    },
    Snyaar: {
      windows: 6,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-15 17:55:57",
    },
    Yupitan: {
      windows: 6,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-15 17:56:09",
    },
    Darth: {
      windows: 6,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-15 17:57:54",
    },
    Taisai: {
      windows: 2,
      message: "x2 | x-out",
      checkForError: false,
      xClaim: false,
      xKill: false,
      timestamp: "2024-11-15 18:14:44",
      xOutWindow: 3,
    },
    Thris: {
      windows: 5,
      message: "x3",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-15 18:10:42",
    },
  });

  t.end();
});

test("Nov21 Ada4 - x-out and x-in format", async (t) => {
  const mockKingsChannel = loadJsonFile(
    "test_data/nov21-ada4.json"
  ) as TextChannel & { messages: Message[] };
  const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);
  // await writeToJSONFile(parsedWindowsPerMember);
  t.deepEqual(parsedWindowsPerMember, {
    Lordgore: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:53:31",
    },
    Xtal: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:53:31",
    },
    Syragon: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:53:41",
    },
    Junonrunon: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:54:10",
    },
    Lilsheck: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:54:19",
    },
    Koobu: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:54:32",
    },
    Cocopuff: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:55:55",
    },
    Hanayaka: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:56:20",
    },
    Whereami: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:56:40",
    },
    Archmage: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:57:30",
    },
    Faeyn: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:59:03",
    },
    Tarnish: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 09:59:47",
    },
    Beastieboy: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:00:21",
    },
    Tuple: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:00:38",
    },
    Yupitan: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:02:19",
    },
    Donovan: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:04:10",
    },
    Naten: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:05:02",
    },
    Mathrandir: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:05:50",
    },
    Arturiel: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:06:00",
    },
    Sebasthegalka: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:06:48",
    },
    Karianna: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:07:22",
    },
    Leob: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:08:08",
    },
    Nar: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:10:13",
    },
    Chronus: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:10:39",
    },
    Olenna: {
      windows: 5,
      message: "x",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:10:40",
    },
    Sabyrd: {
      windows: 3,
      message: "x | x-out",
      xClaim: false,
      xKill: false,
      checkForError: false,
      timestamp: "2024-11-21 10:35:51",
      xOutWindow: 3,
    },
    Snyaar: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-21 10:16:13",
    },
    Blankets: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-21 10:16:19",
    },
    Switchstance: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-21 10:17:04",
    },
    Chuchu: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-21 10:17:28",
    },
    Nesta: {
      windows: 4,
      message: "x2",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-21 10:19:39",
    },
    Miradin: {
      windows: 5,
      message: "x (forgot to x in at start)",
      xClaim: true,
      xKill: true,
      checkForError: false,
      timestamp: "2024-11-21 10:20:30",
    },
    Rhelk: {
      windows: 3,
      message: "x3",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-21 10:25:59",
    },
    Rerabick: {
      windows: 3,
      message: "x3",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-21 10:31:29",
    },
    Samseny: {
      windows: 1,
      message: "x-5",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-21 10:47:27",
    },
    Dogs: {
      windows: 1,
      message: "x5",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-21 10:51:20",
    },
    Nurgle: {
      windows: 1,
      message: "x5",
      checkForError: false,
      xClaim: true,
      xKill: true,
      timestamp: "2024-11-21 10:52:52",
    },
  });

  t.end();
});

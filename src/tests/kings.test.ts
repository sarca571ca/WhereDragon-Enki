import test from "tape";
import { channelMessagesToWindows } from "../helpers/channelToDKP";
import { loadJsonFile } from "../helpers/utils";
import { TextChannel, Message } from "discord.js";
import { writeToJSONFile } from "..";

// test("Kings (Behe/Faf/Ada) Channel To DKP - 5 windows, pop msg", async (t) => {
//   const mockKingsChannel = loadJsonFile(
//     "test_data/behe_7.json"
//   ) as TextChannel & { messages: Message[] };
//   const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);

//   t.deepEqual(parsedWindowsPerMember, {
//     Snyaar: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:39:28",
//     },
//     Tuple: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:40:17",
//     },
//     Junonrunon: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:40:17",
//     },
//     Rhelk: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:40:18",
//     },
//     Dogs: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:40:55",
//     },
//     Chuchu: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:42:51",
//     },
//     Miradin: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:43:17",
//     },
//     Habiba: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:43:21",
//     },
//     Cocopuff: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:43:35",
//     },
//     Azalin: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:43:49",
//     },
//     Loyuinyu: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:44:50",
//     },
//     Leob: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:46:57",
//     },
//     Switchstance: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:48:28",
//     },
//     Pengo: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:49:56",
//     },
//     Sabyrd: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:50:08",
//     },
//     Paulilla: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:50:12",
//     },
//     Waky: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:50:26",
//     },
//     Krados: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:50:44",
//     },
//     Naten: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:50:54",
//     },
//     Arch: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:51:36",
//     },
//     Ancestor: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:52:07",
//     },
//     Magnum: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:52:12",
//     },
//     Chaosmage: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:52:41",
//     },
//     Yupitan: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-17 06:53:44",
//     },
//     Nar: {
//       windows: 4,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-17 06:56:07",
//     },
//     Samseny: {
//       windows: 4,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-17 06:57:40",
//     },
//     Midnigh: {
//       windows: 4,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-17 07:03:39",
//     },
//     Suds: {
//       windows: 3,
//       message: "x3",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-17 07:15:16",
//     },
//     Caley: {
//       windows: 1,
//       message: "x5",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-17 07:28:00",
//     },
//     Gow: {
//       windows: 1,
//       message: "x5",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-17 07:29:28",
//     },
//     Sebasthegalka: {
//       windows: 1,
//       message: "x5",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-17 07:33:08",
//     },
//     Brandan: {
//       windows: 0,
//       message: "x-kill",
//       xKill: true,
//       xClaim: false,
//       checkForError: false,
//       timestamp: "2024-11-17 07:39:21",
//     },
//   });

//   t.end();
// });

// test("Nov05 Ada4", async (t) => {
//   const mockKingsChannel = loadJsonFile(
//     "test_data/nov05-ada4.json"
//   ) as TextChannel & { messages: Message[] };
//   const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);

//   t.deepEqual(parsedWindowsPerMember, {
//     Karianna: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:17:03",
//     },
//     Yeti: {
//       windows: 2,
//       message: "x (ka scout)",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:17:51",
//     },
//     Snyaar: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:18:02",
//     },
//     Arturiel: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:19:17",
//     },
//     Cocopuff: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:19:22",
//     },
//     Foopy: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:19:44",
//     },
//     Brandan: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:20:27",
//     },
//     Morrigan: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:21:12",
//     },
//     Tarnish: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:21:56",
//     },
//     Shei: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:21:59",
//     },
//     Nicolesixtynine: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:22:25",
//     },
//     Rhelk: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:22:38",
//     },
//     Syragon: {
//       windows: 2,
//       message: "enki result post `scout` parse fix",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-22 09:26:15",
//     },
//     Chaosmage: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:24:15",
//     },
//     Naten: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:24:31",
//     },
//     Mayer: {
//       windows: 2,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:25:24",
//     },
//     Riccu: {
//       windows: 2,
//       message: "x-1",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-05 09:25:42",
//     },
//     Tuple: {
//       windows: 1,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-05 09:27:20",
//     },
//     Voidedge: {
//       windows: 1,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-05 09:29:17",
//     },
//     Magnum: {
//       windows: 1,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-05 09:29:36",
//     },
//     Senormiyagi: {
//       windows: 1,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-05 09:29:49",
//     },
//     Sabyrd: {
//       windows: 1,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-05 09:31:00",
//     },
//   });

//   t.end();
// });

// test("Nov06 Ada5", async (t) => {
//   const mockKingsChannel = loadJsonFile(
//     "test_data/nov06-ada5.json"
//   ) as TextChannel & { messages: Message[] };
//   const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);
//   // await writeToJSONFile(parsedWindowsPerMember);
//   t.deepEqual(parsedWindowsPerMember, {
//     Junonrunon: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:30:50",
//     },
//     Karianna: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:30:57",
//     },
//     Arturiel: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:32:17",
//     },
//     Byorn: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:37:12",
//     },
//     Leob: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:39:11",
//     },
//     Whereami: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:40:27",
//     },
//     Llate: {
//       windows: 2,
//       message: "x | x-out",
//       xClaim: false,
//       xKill: false,
//       checkForError: false,
//       timestamp: "2024-11-06 08:15:58",
//       xOutWindow: 1,
//     },
//     Lilsheck: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:42:17",
//     },
//     Yupitan: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:44:32",
//     },
//     Sebasthegalka: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:44:32",
//     },
//     Caley: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:44:52",
//     },
//     Yeti: {
//       windows: 5,
//       message: "x",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:45:04",
//     },
//     Tuple: {
//       windows: 5,
//       message: "x1",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:45:20",
//     },
//     Cocopuff: {
//       windows: 4,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-06 07:45:29",
//     },
//     Krados: {
//       windows: 4,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-06 07:45:34",
//     },
//     Tarnish: {
//       windows: 5,
//       message: "x1",
//       xClaim: true,
//       xKill: true,
//       checkForError: false,
//       timestamp: "2024-11-06 07:45:35",
//     },
//     Naten: {
//       windows: 4,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-06 07:45:37",
//     },
//     Brandan: {
//       windows: 4,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-06 07:48:50",
//     },
//     Faeyn: {
//       windows: 4,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-06 07:49:33",
//     },
//     Dogs: {
//       windows: 4,
//       message: "x2",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-06 07:55:03",
//     },
//     Nar: {
//       windows: 2,
//       message: "x4",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-06 08:14:43",
//     },
//     Switchstance: {
//       windows: 1,
//       message: "x5",
//       checkForError: false,
//       xClaim: true,
//       xKill: true,
//       timestamp: "2024-11-06 08:23:50",
//     },
//   });

//   t.end();
// });

test("Nov12 Beh2 - Alt name (darkfarkee)", async (t) => {
  const mockKingsChannel = loadJsonFile(
    "test_data/nov12-beh2.json"
  ) as TextChannel & { messages: Message[] };
  const parsedWindowsPerMember = channelMessagesToWindows(mockKingsChannel);
  await writeToJSONFile(parsedWindowsPerMember);
  t.deepEqual(parsedWindowsPerMember, {});

  t.end();
});
